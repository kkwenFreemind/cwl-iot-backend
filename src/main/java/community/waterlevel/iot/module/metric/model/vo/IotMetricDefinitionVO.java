package community.waterlevel.iot.module.metric.model.vo;

import community.waterlevel.iot.module.metric.model.entity.IotMetricDefinition;
import community.waterlevel.iot.module.metric.model.enums.MetricDataType;
import community.waterlevel.iot.module.metric.model.enums.MetricUnit;
import community.waterlevel.iot.module.metric.model.enums.PhysicalQuantity;
import community.waterlevel.iot.module.metric.service.IotMetricDefinitionService;
import lombok.Data;

import java.time.LocalDateTime;

/**
 * IoT Metric Definition Value Object (VO)
 *
 * This immutable value object serves as the primary data transfer object for IoT metric definitions
 * in API responses and inter-layer communication. It encapsulates all relevant metric definition
 * attributes while providing computed fields for enhanced client-side processing and validation.
 *
 * Key Characteristics:
 * - Immutable data structure for thread-safe operations
 * - Comprehensive field coverage including metadata and computed properties
 * - Department-scoped data isolation for multi-tenant environments
 * - Support for both persistent and computed field types
 * - Optimized for JSON serialization and API response formatting
 *
 * Architectural Role:
 * - Acts as the boundary object between service and presentation layers
 * - Provides clean separation of concerns in layered architecture
 * - Enables flexible data transformation and field computation
 * - Supports API versioning through selective field exposure
 *
 * Data Flow:
 * 1. Entity → VO conversion in service layer
 * 2. VO serialization for API responses
 * 3. Client-side processing and validation
 * 4. UI rendering and user interaction
 *
 * Computed Fields:
 * - isNumericType: Determines if the data type supports mathematical operations
 * - unitCompatible: Validates unit-quantity compatibility for data integrity
 *
 * Usage Scenarios:
 * - REST API response objects for metric definition endpoints
 * - Frontend data binding and form population
 * - Report generation and data export operations
 * - Integration with external systems and APIs
 * - Client-side validation and business rule enforcement
 *
 * @author Chang Xiu-Wen, AI-Enhanced
 * @since 2025/09/16
 * @see IotMetricDefinition
 * @see IotMetricDefinitionService
 */
@Data
public class IotMetricDefinitionVO {

    /**
     * Primary Key: Globally unique identifier for the IoT metric definition.
     *
     * This field serves as the primary identifier across the entire system:
     * - Auto-generated by the database using sequence or auto-increment
     * - Used for entity relationships and foreign key references
     * - Essential for update, delete, and retrieval operations
     * - Maintains referential integrity across the application
     *
     * Constraints:
     * - Must be unique across all metric definitions
     * - Cannot be null for persisted entities
     * - Read-only field (set by database or ORM)
     * - Used in URL paths and API endpoints for resource identification
     */
    private Long id;

    /**
     * Department Identifier: References the organizational unit that owns this metric definition.
     *
     * This field implements multi-tenant data isolation and access control:
     * - Associates metric definitions with specific departments or organizations
     * - Enables department-level data partitioning and security boundaries
     * - Supports role-based access control and data filtering
     * - Critical for maintaining data privacy and compliance requirements
     *
     * Business Logic:
     * - Users can only access metric definitions within their department
     * - Enables department-specific metric naming and customization
     * - Supports organizational hierarchy and reporting structures
     * - Facilitates data segregation for regulatory compliance
     *
     * Constraints:
     * - Must reference a valid, active department
     * - Cannot be null (required field)
     * - Used in all data access operations for security filtering
     * - Indexed for efficient department-based queries
     */
    private Long deptId;

    /**
     * Metric Name: Human-readable identifier for the IoT metric definition.
     *
     * This field provides the primary user-facing identifier for the metric:
     * - Used in user interfaces, reports, and documentation
     * - Serves as the primary key for uniqueness validation within departments
     * - Supports search and filtering operations across the system
     * - Enables meaningful metric identification and categorization
     *
     * Naming Conventions:
     * - Should be descriptive and follow organizational standards
     * - Supports spaces and special characters for readability
     * - Case-insensitive for search and comparison operations
     * - Should be unique within the department scope
     *
     * Usage Examples:
     * - "Water Level Sensor Reading"
     * - "Temperature Monitoring"
     * - "Battery Voltage Level"
     * - "Flow Rate Measurement"
     *
     * Constraints:
     * - Must be unique within the department (case-insensitive)
     * - Cannot be null or empty
     * - Maximum length defined by database schema
     * - Used in API responses and user interface displays
     */
    private String metricName;

    /**
     * Alias: Optional short name or abbreviation for the metric definition.
     *
     * This field provides an alternative, concise identifier for the metric:
     * - Used for space-constrained displays and technical interfaces
     * - Supports abbreviated naming conventions and technical standards
     * - Enables compact representation in charts, tables, and reports
     * - Facilitates integration with external systems and protocols
     *
     * Use Cases:
     * - Short labels in dashboard widgets and monitoring displays
     * - Technical identifiers for API integrations and data exports
     * - Abbreviations in protocol messages and data transmission
     * - Compact naming in mobile applications and responsive designs
     *
     * Characteristics:
     * - Optional field (can be null)
     * - Shorter than metric name for space efficiency
     * - May contain technical abbreviations and acronyms
     * - Supports both human-readable and machine-friendly formats
     *
     * Examples:
     * - "WL" for "Water Level"
     * - "TEMP" for "Temperature"
     * - "BATT_V" for "Battery Voltage"
     * - "FLOW" for "Flow Rate"
     */
    private String alias;

    /**
     * Physical Quantity: The fundamental physical property being measured by this metric.
     *
     * This field defines the scientific or engineering quantity that the metric represents:
     * - Establishes the dimensional nature of the measurement
     * - Determines compatible units of measurement
     * - Supports scientific accuracy and dimensional analysis
     * - Enables physics-based validation and data processing
     *
     * Quantity Categories:
     * - Base Quantities: Length, Mass, Time, Temperature, Electric Current
     * - Derived Quantities: Velocity, Acceleration, Force, Pressure, Energy
     * - Engineering Quantities: Flow Rate, Voltage, Current, Resistance
     * - Custom Quantities: Domain-specific measurements and calculations
     *
     * Business Impact:
     * - Ensures measurement consistency and scientific accuracy
     * - Supports unit conversion and dimensional analysis
     * - Enables physics-based validation of sensor data
     * - Facilitates integration with scientific and engineering systems
     *
     * Validation Rules:
     * - Must be compatible with the selected unit of measurement
     * - Determines the appropriate data type for measurements
     * - Influences data processing and analysis algorithms
     * - Critical for maintaining measurement integrity and accuracy
     *
     * @see PhysicalQuantity
     * @see MetricUnit
     */
    private PhysicalQuantity physicalQuantity;

    /**
     * Unit of Measurement: The standardized unit used to express metric values.
     *
     * This field specifies the measurement unit for the physical quantity:
     * - Defines the scale and reference for measurement values
     * - Must be compatible with the specified physical quantity
     * - Supports SI units and industry-standard conventions
     * - Enables unit conversion and data normalization
     *
     * Unit Categories:
     * - SI Base Units: meter (m), kilogram (kg), second (s), kelvin (K)
     * - SI Derived Units: newton (N), pascal (Pa), joule (J), watt (W)
     * - Engineering Units: volt (V), ampere (A), hertz (Hz), degree Celsius (°C)
     * - Custom Units: Organization-specific or legacy measurement units
     *
     * Compatibility Requirements:
     * - Must be dimensionally compatible with the physical quantity
     * - Supports unit conversion between compatible units
     * - Enables accurate data aggregation and analysis
     * - Critical for scientific measurement accuracy
     *
     * Business Considerations:
     * - Affects data display and user interface formatting
     * - Influences sensor calibration and measurement accuracy
     * - Supports internationalization and localization requirements
     * - Enables integration with external measurement systems
     *
     * @see MetricUnit
     * @see PhysicalQuantity
     */
    private MetricUnit unit;

    /**
     * Data Type: The Sparkplug B data type specification for metric values.
     *
     * This field defines the technical data type for measurement values according to MQTT Sparkplug B protocol:
     * - Specifies the binary representation and encoding of metric data
     * - Determines the range and precision of measurement values
     * - Influences data transmission efficiency and storage requirements
     * - Critical for protocol compliance and system interoperability
     *
     * Sparkplug B Data Types:
     * - Integer Types: Int8, Int16, Int32, Int64, UInt8, UInt16, UInt32, UInt64
     * - Floating Point: Float (32-bit), Double (64-bit)
     * - Text Types: String (UTF-8 encoded), Text (extended text)
     * - Temporal Types: DateTime (timestamp representation)
     * - Boolean: Boolean (true/false values)
     * - Complex Types: DataSet (structured data), Template (reusable structures)
     *
     * Technical Implications:
     * - Affects MQTT payload size and transmission efficiency
     * - Determines database storage requirements and indexing strategies
     * - Influences data processing algorithms and computational accuracy
     * - Critical for real-time data streaming and edge computing
     *
     * Selection Criteria:
     * - Based on measurement precision requirements
     * - Considers data transmission bandwidth constraints
     * - Accounts for storage and processing resource limitations
     * - Ensures compatibility with IoT platform capabilities
     *
     * @see MetricDataType
     */
    private MetricDataType dataType;

    /**
     * Active Status: Indicates whether this metric definition is currently active and available for use.
     *
     * This field implements soft delete functionality and operational status management:
     * - Controls whether the metric appears in active lists and queries
     * - Supports temporary deactivation without data loss
     * - Enables gradual rollout and retirement of metric definitions
     * - Maintains historical data integrity for reporting purposes
     *
     * Status Values:
     * - true: Metric is active and available for data collection and processing
     * - false: Metric is inactive (soft deleted) but data is preserved
     *
     * Business Logic:
     * - Active metrics appear in user interfaces and API responses
     * - Inactive metrics are excluded from new data collection
     * - Historical data remains accessible for analysis and reporting
     * - Supports compliance requirements for data retention
     *
     * Operational Use Cases:
     * - Temporary sensor maintenance or calibration periods
     * - Gradual migration to new metric definitions
     * - Regulatory compliance for data archiving
     * - System maintenance and troubleshooting scenarios
     *
     * Default Behavior:
     * - New metric definitions are created as active (true)
     * - Deactivation preserves all historical data and relationships
     * - Reactivation restores full operational status
     */
    private Boolean isActive;

    /**
     * Version Number: Implements optimistic locking for concurrent update protection.
     *
     * This field prevents lost updates in multi-user environments:
     * - Incremented on every successful update operation
     * - Used by ORM for optimistic concurrency control
     * - Detects concurrent modifications and prevents data corruption
     * - Supports automatic retry mechanisms for conflicting updates
     *
     * Optimistic Locking Mechanism:
     * 1. Read operation captures current version number
     * 2. Update operation includes version in WHERE clause
     * 3. If version changed, update fails with optimistic lock exception
     * 4. Application can retry or handle conflict appropriately
     *
     * Benefits:
     * - Prevents silent data loss from concurrent updates
     * - Enables scalable concurrent operations without database locks
     * - Provides clear feedback on update conflicts
     * - Supports automatic conflict resolution strategies
     *
     * Implementation Details:
     * - Auto-incremented by database or application logic
     * - Starts at 1 for new entities
     * - Read-only for client applications
     * - Critical for data consistency in distributed systems
     *
     * Conflict Resolution:
     * - Applications should handle OptimisticLockException
     * - Implement retry logic with exponential backoff
     * - Provide user feedback for manual conflict resolution
     * - Consider merge strategies for complex conflicts
     */
    private Integer version;

    /**
     * Creation Timestamp: Records when this metric definition was initially created.
     *
     * This field provides audit trail and temporal tracking capabilities:
     * - Captures the exact moment of metric definition creation
     * - Supports chronological ordering and historical analysis
     * - Enables audit logging and compliance reporting
     * - Facilitates data lifecycle management and retention policies
     *
     * Audit Trail Applications:
     * - Tracking metric definition creation history
     * - Supporting compliance and regulatory requirements
     * - Enabling temporal queries and data analysis
     * - Providing creation attribution for accountability
     *
     * Technical Characteristics:
     * - Stored with timezone information for global consistency
     * - High precision timestamp (includes milliseconds)
     * - Immutable field (set once at creation time)
     * - Used for sorting and filtering operations
     *
     * Business Value:
     * - Supports data governance and audit requirements
     * - Enables trend analysis and system usage metrics
     * - Facilitates system migration and data validation
     * - Provides temporal context for metric evolution
     *
     * Usage in Queries:
     * - Filter metrics created within specific time ranges
     * - Sort results by creation date for chronological display
     * - Generate reports on metric definition creation patterns
     * - Support data retention and archival policies
     */
    private LocalDateTime createdAt;

    /**
     * Last Update Timestamp: Records when this metric definition was last modified.
     *
     * This field tracks modification history and supports data synchronization:
     * - Updated on every successful modification operation
     * - Enables change detection and incremental updates
     * - Supports data synchronization across distributed systems
     * - Facilitates cache invalidation and refresh strategies
     *
     * Change Tracking Applications:
     * - Identifying recently modified metric definitions
     * - Supporting incremental data synchronization
     * - Enabling change-based notifications and alerts
     * - Providing modification history for audit purposes
     *
     * Technical Implementation:
     * - Automatically updated by ORM or application logic
     * - Includes timezone information for global consistency
     * - High precision timestamp with millisecond accuracy
     * - Used in conditional update operations and caching
     *
     * Synchronization Use Cases:
     * - Cache invalidation based on modification timestamps
     * - Incremental data replication and backup strategies
     * - Real-time dashboard updates and notifications
     * - Conflict resolution in distributed environments
     *
     * Query Optimization:
     * - Index support for efficient temporal queries
     * - Enables "modified since" filtering for data synchronization
     * - Supports time-based data partitioning strategies
     * - Facilitates performance optimization for large datasets
     */
    private LocalDateTime updatedAt;

    /**
     * Computed Field: Indicates whether this metric's data type supports mathematical operations.
     *
     * This derived field provides client-side processing guidance for numeric data handling:
     * - Determines if the data type supports arithmetic operations
     * - Guides user interface rendering and input validation
     * - Enables appropriate data processing and analysis algorithms
     * - Supports conditional logic in client applications
     *
     * Numeric Data Types:
     * - Integer Types: Int8, Int16, Int32, Int64, UInt8, UInt16, UInt32, UInt64
     * - Floating Point Types: Float, Double
     * - Non-Numeric Types: String, Text, Boolean, DateTime
     *
     * Client-Side Implications:
     * - Numeric types enable mathematical operations and aggregations
     * - Support statistical calculations (average, min, max, standard deviation)
     * - Enable trend analysis and data visualization
     * - Support unit conversion and scaling operations
     *
     * User Interface Considerations:
     * - Numeric fields may display with formatting and precision controls
     * - Enable calculator-style input and validation
     * - Support range validation and boundary checking
     * - Enable comparative operations and filtering
     *
     * Data Processing Benefits:
     * - Enables efficient numerical computations and aggregations
     * - Supports advanced analytics and reporting capabilities
     * - Facilitates integration with mathematical and statistical libraries
     * - Enables performance optimizations for numerical data processing
     *
     * @see MetricDataType
     */
    private Boolean isNumericType;

    /**
     * Computed Field: Validates whether the selected unit is compatible with the physical quantity.
     *
     * This derived field provides real-time validation feedback for data integrity:
     * - Performs dimensional analysis between unit and physical quantity
     * - Ensures scientific accuracy and measurement consistency
     * - Supports client-side validation and user guidance
     * - Prevents invalid unit-quantity combinations at the UI level
     *
     * Compatibility Validation Rules:
     * - Length quantities must use length units (meters, feet, inches)
     * - Mass quantities must use mass units (kilograms, pounds, grams)
     * - Time quantities must use time units (seconds, minutes, hours)
     * - Temperature requires appropriate temperature scales (Celsius, Fahrenheit, Kelvin)
     *
     * Validation Logic:
     * - Checks dimensional consistency between unit and quantity
     * - Supports SI unit system and industry standards
     * - Enables unit conversion capabilities for compatible units
     * - Prevents measurement errors and data corruption
     *
     * User Experience Benefits:
     * - Provides immediate feedback on unit selection
     * - Prevents invalid configurations before submission
     * - Guides users toward scientifically correct setups
     * - Reduces configuration errors and support requests
     *
     * System Integration:
     * - Supports automated validation in service layer
     * - Enables conditional UI rendering based on compatibility
     * - Facilitates integration testing and data validation
     * - Supports audit trails for configuration changes
     *
     * @see PhysicalQuantity
     * @see MetricUnit
     */
    private Boolean unitCompatible;
}