package community.waterlevel.iot.module.device.converter;

import community.waterlevel.iot.module.device.model.entity.IotDeviceJpa;
import community.waterlevel.iot.module.device.model.enums.DeviceStatusEnum;
import community.waterlevel.iot.module.device.model.enums.DeviceModelEnum;
import community.waterlevel.iot.module.device.model.form.IotDeviceForm;
import community.waterlevel.iot.module.device.model.vo.IotDeviceVO;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;

/**
 * MapStruct converter interface for IoT device model transformations.
 *
 * <p>This converter provides bidirectional mapping between different IoT device model representations:
 * <ul>
 *   <li>{@link IotDeviceJpa} - JPA entity for database persistence</li>
 *   <li>{@link IotDeviceForm} - Form object for API requests/responses</li>
 *   <li>{@link IotDeviceVO} - View object for presentation layer</li>
 * </ul>
 *
 * <p>The converter handles complex type conversions, particularly for the device status field
 * which requires transformation between String (form/VO) and {@link DeviceStatusEnum} enum (entity).
 *
 * <p>Key features:
 * <ul>
 *   <li>Automatic field mapping with custom overrides</li>
 *   <li>Status field conversion between String and DeviceStatus enum</li>
 *   <li>Selective field ignoring for fields managed by service layer or database</li>
 *   <li>Spring component model integration for dependency injection</li>
 * </ul>
 *
 * @author Chang Xiu-Wen, AI-Enhanced
 * @since 2025/09/15
 * 
 */
@Mapper(componentModel = "spring")
public interface IotDeviceJpaConverter {

    /**
     * Converts an IoT device JPA entity to a view object for presentation.
     *
     * <p>This method maps the database entity to a client-friendly view object,
     * handling the conversion of the status field from {@link DeviceStatusEnum} enum
     * to String representation.
     *
     * <p>Note: The {@code deptName} field is ignored in this mapping as it is
     * populated dynamically in the service layer through department repository lookup.
     *
     * @param entity the JPA entity to convert
     * @return the corresponding view object with converted field types
     */
    @Mapping(target = "status", source = "status")
    @Mapping(target = "deptName", ignore = true) // Handled in service layer
    IotDeviceVO toVo(IotDeviceJpa entity);

    /**
     * Converts an IoT device form object to a JPA entity for persistence.
     *
     * <p>This method transforms form data into a database entity, with several
     * fields ignored as they are managed by the service layer or database:
     * <ul>
     *   <li>{@code deviceId} - Generated by UUID in service layer</li>
     *   <li>{@code createdBy} - Set from security context in service layer</li>
     *   <li>{@code createdAt} - Set to current timestamp in service layer</li>
     *   <li>{@code lastSeen} - Managed by device activity tracking</li>
     *   <li>{@code isDeleted} - Defaults to false for new entities</li>
     *   <li>{@code updatedAt} - Set during updates in service layer</li>
     *   <li>{@code geom} - Computed by database trigger from lat/lng</li>
     * </ul>
     *
     * @param form the form object containing device data from API request
     * @return the JPA entity ready for database persistence
     */
    @Mapping(target = "deviceId", ignore = true)
    @Mapping(target = "createdBy", ignore = true) // Set in service layer
    @Mapping(target = "createdAt", ignore = true)
    @Mapping(target = "lastSeen", ignore = true)
    @Mapping(target = "isDeleted", ignore = true)
    @Mapping(target = "updatedAt", ignore = true)
    @Mapping(target = "geom", ignore = true) // Handled by database trigger
    @Mapping(target = "deviceModel", source = "deviceModel")
    IotDeviceJpa toEntity(IotDeviceForm form);

    /**
     * Converts an IoT device JPA entity to a form object.
     *
     * <p>This method is used for populating forms with existing device data,
     * typically for update operations where the form needs to be pre-filled
     * with current values.
     *
     * @param entity the JPA entity containing current device data
     * @return the form object with populated fields for API response
     */
    @Mapping(target = "deviceType", source = "deviceModel")
    IotDeviceForm toForm(IotDeviceJpa entity);

    /**
     * Converts a string representation to a DeviceStatus enum value.
     *
     * <p>This default method handles the conversion from string values (typically
     * from API requests) to the strongly-typed {@link DeviceStatusEnum} enum used
     * in the JPA entity. The conversion is case-insensitive and provides
     * fallback to {@link DeviceStatusEnum#INACTIVE} for invalid inputs.
     *
     * <p>Supported string values: "ACTIVE", "INACTIVE", "DISABLED"
     * (case-insensitive).
     *
     * @param status the string representation of device status
     * @return the corresponding DeviceStatus enum value, or INACTIVE if invalid/null
     */
    default DeviceStatusEnum stringToDeviceStatus(String status) {
        if (status == null) return DeviceStatusEnum.INACTIVE;
        try {
            return DeviceStatusEnum.valueOf(status.toUpperCase());
        } catch (IllegalArgumentException e) {
            return DeviceStatusEnum.INACTIVE;
        }
    }

    /**
     * Converts a DeviceStatus enum value to its string representation.
     *
     * <p>This default method handles the conversion from {@link DeviceStatusEnum} enum
     * to string values for API responses and form representations. Returns the
     * enum name in uppercase format.
     *
     * @param status the DeviceStatus enum value to convert
     * @return the string representation of the status, or null if status is null
     */
    default String deviceStatusToString(DeviceStatusEnum status) {
        return status == null ? null : status.name();
    }

    /**
     * Converts a string representation to a DeviceType enum value.
     *
     * <p>This default method handles the conversion from string values (typically
     * from API requests) to the strongly-typed {@link DeviceModelEnum} enum used
     * in the JPA entity. The conversion is case-insensitive and provides
     * fallback to {@link DeviceModelEnum#OTHER} for invalid inputs.
     *
     * <p>Supported string values: "WATER_LEVEL_SENSOR", "OTHER" (case-insensitive).
     *
     * @param deviceType the string representation of device type
     * @return the corresponding DeviceType enum value, or OTHER if invalid/null
     */
    default DeviceModelEnum stringToDeviceType(String deviceType) {
        if (deviceType == null) return DeviceModelEnum.OTHER;
        try {
            return DeviceModelEnum.valueOf(deviceType.toUpperCase());
        } catch (IllegalArgumentException e) {
            return DeviceModelEnum.OTHER;
        }
    }

    /**
     * Converts a DeviceType enum value to its string representation.
     *
     * <p>This default method handles the conversion from {@link DeviceModelEnum} enum
     * to string values for API responses and form representations. Returns the
     * enum name in uppercase format.
     *
     * @param deviceType the DeviceType enum value to convert
     * @return the string representation of the device type, or null if deviceType is null
     */
    default String deviceTypeToString(DeviceModelEnum deviceType) {
        return deviceType == null ? null : deviceType.name();
    }
}
