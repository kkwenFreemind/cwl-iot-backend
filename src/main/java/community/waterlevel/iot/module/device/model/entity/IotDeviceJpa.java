package community.waterlevel.iot.module.device.model.entity;

import community.waterlevel.iot.common.annotation.DataPermission;
import community.waterlevel.iot.module.device.model.enums.DeviceStatusEnum;
import community.waterlevel.iot.module.device.model.enums.DeviceModelEnum;
import community.waterlevel.iot.module.device.model.enums.DeviceModelEnumConverter;
import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;
import org.hibernate.annotations.SQLDelete;
import org.hibernate.annotations.SQLRestriction;

import java.time.LocalDateTime;
import java.util.UUID;

/**
 * JPA entity representing an IoT device in the water level monitoring system.
 *
 * <p>This entity maps to the {@code iot_device} table and encapsulates all device-related
 * information including location data, operational status, and audit information.
 * The entity implements soft delete functionality and data permission controls.
 *
 * <p>Key features:
 * <ul>
 *   <li>Soft delete support with {@code is_deleted} flag</li>
 *   <li>Data permission filtering based on department and user access</li>
 *   <li>PostGIS geography support for spatial queries</li>
 *   <li>Automatic status conversion using {@link DeviceStatusConverter}</li>
 *   <li>Type-safe device classification using {@link DeviceModelEnum}</li>
 *   <li>Comprehensive audit trail with creation and modification tracking</li>
 * </ul>
 *
 * <p>Database table: {@code iot_device}
 *
 * @author Chang Xiu-Wen, AI-Enhanced
 * @since 2025/09/15
 * @see DeviceStatusEnum
 * @see DeviceModelEnum
 * @see DeviceStatusConverter
 * @see DataPermission
 */
@Getter
@Setter
@Entity
@Table(name = "iot_device")
@SQLDelete(sql = "UPDATE iot_device SET is_deleted = 1 WHERE device_id = ?")
@SQLRestriction("is_deleted = 0")
@DataPermission(deptAlias = "d", deptIdColumnName = "deptId", userAlias = "u", userIdColumnName = "createdBy")
public class IotDeviceJpa {

    /**
     * Primary key: Universally Unique Identifier for the device.
     *
     * <p>This UUID is automatically generated by the database using the
     * {@code gen_random_uuid()} function and serves as the unique identifier
     * for each IoT device in the system.
     *
     * <p>Database column: {@code device_id} (UUID type)
     */
    @Id
    @Column(name = "device_id", columnDefinition = "uuid")
    private UUID deviceId;

    /**
     * Human-readable name of the IoT device.
     *
     * <p>This field stores a descriptive name for the device, such as
     * "Baseball Stadium South Side" or "River Monitoring Station #1".
     * The name should be unique within each department.
     *
     * <p>Database column: {@code device_name} (NOT NULL)
     * <p>Constraints: Unique within department (enforced by database)
     */
    @Column(name = "device_name", nullable = false)
    private String deviceName;

    /**
     * Department identifier that owns this device.
     *
     * <p>Links the device to its managing department for organizational
     * hierarchy and access control. This field is used by the data permission
     * system to filter devices based on user department access.
     *
     * <p>Database column: {@code dept_id} (NOT NULL)
     * <p>Foreign Key: References {@code sys_dept(id)}
     */
    @Column(name = "dept_id", nullable = false)
    private Long deptId;

    /**
     * Model or type specification of the IoT device.
     *
     * <p>Describes the hardware model or type of the device, such as
     * "water", "temperature", or specific model numbers. This field
     * is optional and used for device categorization and reporting.
     *
     * <p>Database column: {@code device_model} (NULLABLE)
     */
    @Convert(converter = DeviceModelEnumConverter.class)
    @Column(name = "device_model")
    private DeviceModelEnum deviceModel = DeviceModelEnum.OTHER;


    /**
     * Latitude coordinate of the device's physical location.
     *
     * <p>Stores the WGS84 latitude coordinate where the device is deployed.
     * Used for geographical mapping and proximity-based queries.
     *
     * <p>Database column: {@code latitude} (NULLABLE)
     * <p>Range: -90.0 to 90.0 degrees
     */
    @Column(name = "latitude")
    private Double latitude;

    /**
     * Longitude coordinate of the device's physical location.
     *
     * <p>Stores the WGS84 longitude coordinate where the device is deployed.
     * Used for geographical mapping and proximity-based queries.
     *
     * <p>Database column: {@code longitude} (NULLABLE)
     * <p>Range: -180.0 to 180.0 degrees
     */
    @Column(name = "longitude")
    private Double longitude;

    /**
     * PostGIS geography point column for spatial operations.
     *
     * <p>This field stores the device's location as a PostGIS geography point
     * in WGS84 coordinate system. It's automatically maintained by database
     * triggers based on latitude/longitude changes and is used for advanced
     * spatial queries like radius searches and proximity calculations.
     *
     * <p>Database column: {@code geom} (GEOGRAPHY(Point, 4326))
     * <p>Note: Read-only field maintained by database triggers
     */
    @Column(name = "geom", columnDefinition = "GEOGRAPHY(Point, 4326)", insertable = false, updatable = false)
    private String geom;

    /**
     * Human-readable description of the device's location.
     *
     * <p>Provides a textual description of where the device is physically
     * located, such as "Taipei Municipal Tianmu Baseball Stadium" or
     * "River monitoring point near downtown bridge".
     *
     * <p>Database column: {@code location} (NULLABLE)
     */
    @Column(name = "location")
    private String location;

    /**
     * Current operational status of the IoT device.
     *
     * <p>Indicates whether the device is actively operational, temporarily
     * inactive, or permanently disabled. The status affects device behavior
     * and data collection processes.
     *
     * <p>Database column: {@code status} (NOT NULL)
     * <p>Converter: {@link DeviceStatusConverter} handles enum/string conversion
     * <p>Default: {@link DeviceStatusEnum#INACTIVE}
     * <p>Valid values: ACTIVE, INACTIVE, DISABLED
     */
    @Convert(converter = DeviceStatusConverter.class)
    @Column(name = "status", nullable = false)
    private DeviceStatusEnum status = DeviceStatusEnum.INACTIVE;

    /**
     * User ID of the person who created this device record.
     *
     * <p>Stores the identifier of the user who initially registered the device
     * in the system. Used for audit trails and ownership tracking.
     *
     * <p>Database column: {@code created_by} (NOT NULL)
     * <p>Foreign Key: References user table
     */
    @Column(name = "created_by", nullable = false)
    private Long createdBy;

    /**
     * Timestamp when this device record was created.
     *
     * <p>Records the exact date and time when the device was first registered
     * in the system. Automatically set during entity creation.
     *
     * <p>Database column: {@code created_at} (NOT NULL)
     * <p>Default: CURRENT_TIMESTAMP
     */
    @Column(name = "created_at", nullable = false)
    private LocalDateTime createdAt;

    /**
     * Timestamp of the device's last communication or data transmission.
     *
     * <p>Tracks when the device was last seen active and transmitting data.
     * Used for monitoring device health and detecting offline devices.
     *
     * <p>Database column: {@code last_seen} (NULLABLE)
     * <p>Updated by: Device heartbeat or data transmission events
     */
    @Column(name = "last_seen")
    private LocalDateTime lastSeen;

    /**
     * Soft delete flag for logical record deletion.
     *
     * <p>When set to 1, the record is considered deleted but remains in the
     * database for audit and recovery purposes. The {@code @SQLRestriction}
     * annotation ensures soft-deleted records are filtered out by default.
     *
     * <p>Database column: {@code is_deleted} (NOT NULL)
     * <p>Default: 0 (not deleted)
     * <p>Valid values: 0 (active), 1 (deleted)
     */
    @Column(name = "is_deleted", nullable = false)
    private Integer isDeleted = 0;

    /**
     * Timestamp of the last modification to this device record.
     *
     * <p>Records when the device information was last updated. Used for
     * audit trails and optimistic locking scenarios.
     *
     * <p>Database column: {@code updated_at} (NULLABLE)
     * <p>Default: CURRENT_TIMESTAMP on updates
     */
    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

}
