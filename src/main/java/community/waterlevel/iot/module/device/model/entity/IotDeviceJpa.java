package community.waterlevel.iot.module.device.model.entity;

import community.waterlevel.iot.common.annotation.DataPermission;
import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;
import org.hibernate.annotations.Comment;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.SQLDelete;
import org.hibernate.annotations.SQLRestriction;

import java.time.LocalDateTime;
import java.util.UUID;

/**
 * IoT Device JPA entity for managing IoT device metadata and spatial location.
 * Supports device registration, status tracking, and department-based organization
 * with PostGIS spatial capabilities for location-based services.
 *
 * @author Chang Xiu-Wen, AI-Enhanced
 * @since 2025/09/14
 */
@Entity
@Table(name = "iot_device")
@SQLDelete(sql = "UPDATE iot_device SET is_deleted = 1 WHERE device_id = ?")
@SQLRestriction("is_deleted = 0")
@Getter
@Setter
@Comment("IoT Device Table")
@DataPermission(deptIdColumnName = "dept_id", deptAlias = "d")
public class IotDeviceJpa {

    /**
     * Unique device identifier (UUIDv4), auto-generated by system.
     * Used as primary key and MQTT client ID.
     */
    @Id
    @GeneratedValue(generator = "uuid2")
    @GenericGenerator(name = "uuid2", strategy = "uuid2")
    @Column(name = "device_id", columnDefinition = "UUID")
    @Comment("device_id")
    private UUID deviceId;

    /**
     * Human-readable device name, must be unique within the same department/community.
     */
    @Column(name = "device_name", length = 255, nullable = false)
    @Comment("device_name")
    private String deviceName;

    /**
     * Foreign key to sys_dept. Represents the department/community the device belongs to.
     * Used for data isolation and spatial grouping.
     */
    @Column(name = "dept_id", nullable = false)
    @Comment("dept_id")
    private Long deptId;

    /**
     * Optional device model or type (e.g., ESP32-WL, HC-SR04) for classification and filtering.
     */
    @Column(name = "device_model", length = 100)
    @Comment("device_model")
    private String deviceModel;

    /**
     * Raw latitude coordinate (WGS84). Used by frontend maps and APIs.
     * Auto-synced to geom column via database trigger.
     */
    @Column(name = "latitude")
    @Comment("latitude")
    private Double latitude;

    /**
     * Raw longitude coordinate (WGS84). Used by frontend maps and APIs.
     * Auto-synced to geom column via database trigger.
     */
    @Column(name = "longitude")
    @Comment("longitude")
    private Double longitude;

    /**
     * PostGIS GEOGRAPHY(Point, 4326) for spatial indexing and advanced queries.
     * Auto-generated from latitude/longitude by database trigger.
     * This field is read-only and managed by the database.
     */
    @Column(name = "geom", columnDefinition = "GEOGRAPHY(Point, 4326)", insertable = false, updatable = false)
    @Comment("geom")
    private String geom;

    /**
     * Optional human-readable location description (e.g., "Roof of Building A").
     * Complements coordinates for operational clarity.
     */
    @Column(name = "location", columnDefinition = "TEXT")
    @Comment("location")
    private String location;

    /**
     * Device operational status: 'active' (online), 'inactive' (offline), 'disabled' (admin disabled).
     */
    @Column(name = "status", length = 20, nullable = false)
    @Comment("status")
    private String status = "inactive";

    /**
     * User ID who created this device record.
     */
    @Column(name = "created_by", nullable = false)
    @Comment("created_by")
    private Long createdBy;

    /**
     * Timestamp when the device record was created.
     */
    @Column(name = "created_at", nullable = false)
    @Comment("created_at")
    private LocalDateTime createdAt = LocalDateTime.now();

    /**
     * Timestamp of last communication or data received from device.
     * Used for liveness monitoring.
     */
    @Column(name = "last_seen")
    @Comment("last_seen")
    private LocalDateTime lastSeen;

    /**
     * Soft-delete flag: 0 = active, 1 = deleted.
     * Preserves referential integrity and audit trail.
     */
    @Column(name = "is_deleted", nullable = false)
    @Comment("is_deleted")
    private Integer isDeleted = 0;

    /**
     * Timestamp of last update to this record.
     * Automatically maintained by trigger.
     */
    @Column(name = "updated_at")
    @Comment("updated_at")
    private LocalDateTime updatedAt = LocalDateTime.now();

    /**
     * Pre-persist callback to set creation timestamp.
     */
    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now();
        updatedAt = LocalDateTime.now();
    }

    /**
     * Pre-update callback to update modification timestamp.
     */
    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
    }
}